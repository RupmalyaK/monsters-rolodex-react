{"version":3,"sources":["components/Global.component.js","components/SearchBox.component.js","components/card.component.js","components/card-list.component.js","App.js","serviceWorker.js","index.js"],"names":["GlobalStyle","createGlobalStyle","SearchBoxContainer","styled","input","SearchBox","props","handleSearchFieldChange","fieldDefaultText","type","placeholder","onChange","CardStyle","div","Card","monster","alt","src","id","key","name","email","CardListStyle","CardList","monsters","map","Container","Heading","h1","App","useState","setMonsters","searchField","setSearchField","useEffect","fetch","then","resp","json","users","filteredMonsters","filter","toLowerCase","search","e","target","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qhCACA,IAuBeA,EAvBKC,YAAH,K,sNCEjB,IAAMC,EAAqBC,IAAOC,MAAV,KAiBTC,EARG,SAACC,GAAW,IACnBC,EAA8CD,EAA9CC,wBAA0BC,EAAoBF,EAApBE,iBACjC,OACI,kBAACN,EAAD,CAAoBO,KAAK,SAASC,YAAaF,EAAkBG,SAAUJ,K,qdCZnF,IAAMK,EAAYT,IAAOU,IAAV,KAgCAC,EAZF,SAACR,GAAW,IACdS,EAAWT,EAAXS,QACP,OACI,kBAACH,EAAD,KACI,yBAAKI,IAAI,UAAUC,IAAM,wBAA0BF,EAAQG,GAAK,kBAChE,wBAAIC,IAAKJ,EAAQG,IAAKH,EAAQK,MAC9B,2BAAIL,EAAQM,S,oMCzBxB,IAAMC,EAAgBnB,IAAOU,IAAV,KAoBJU,EAZE,SAACjB,GAAW,IAClBkB,EAAYlB,EAAZkB,SAEP,OACI,6BACI,kBAACF,EAAD,KAAgBE,EAASC,KAAI,SAACV,GAC5B,OAAO,kBAAC,EAAD,CAAMI,IAAOJ,EAAQG,GAAIH,QAAWA,U,uTCVzD,IAAMW,EAAYvB,IAAOU,IAAV,KAWTc,EAAUxB,IAAOyB,GAAV,KAsCEC,EAjCH,WAAO,IAAD,EACiBC,mBAAS,IAD1B,mBACTN,EADS,KACEO,EADF,OAEuBD,mBAAS,IAFhC,mBAETE,EAFS,KAEKC,EAFL,KAKhBC,qBAAU,WACRC,MAAM,8CACLC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACG,GACLR,EAAYQ,QAEb,IAEH,IAIMC,EAAmBhB,EAASiB,QAAO,SAAC1B,GACzC,OAA0E,IAAlEA,EAAQK,KAAKsB,cAAcC,OAAOX,EAAYU,kBAGvD,OACE,oCACA,kBAAC,EAAD,MACA,kBAAChB,EAAD,KACI,kBAACC,EAAD,yBACA,kBAAC,EAAD,CAAWpB,wBAbe,SAACqC,GAC/BX,EAAeW,EAAEC,OAAOC,QAY2CtC,iBAAmB,uBAClF,kBAAC,EAAD,CAAUgB,SAAYgB,OCvCVO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.dde07798.chunk.js","sourcesContent":["import {createGlobalStyle} from \"styled-components\";\r\nconst GlobalStyle = createGlobalStyle`\r\n            body {\r\n                margin: 0;\r\n                padding: 0;\r\n                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\r\n                'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\r\n                sans-serif;\r\n                -webkit-font-smoothing: antialiased;\r\n                -moz-osx-font-smoothing: grayscale;\r\n                background: linear-gradient(\r\n                to left,\r\n                rgba(7, 27, 82, 1) 0%,\r\n                rgba(0, 128, 128, 1) 100%\r\n                );\r\n            }\r\n            \r\n            code {\r\n                font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\r\n                monospace;\r\n            }\r\n\r\n`;\r\n\r\nexport default GlobalStyle; \r\n","import React from \"react\"; \r\nimport styled from \"styled-components\"; \r\n\r\nconst SearchBoxContainer = styled.input`\r\n-webkit-appearance: none;\r\n  border: none;\r\n  outline: none;\r\n  padding: 10px;\r\n  width: 150px;\r\n  line-height: 30px;\r\n  margin-bottom: 30px;\r\n`;\r\nconst SearchBox = (props) => {\r\n    const {handleSearchFieldChange , fieldDefaultText} = props;  \r\n    return (\r\n        <SearchBoxContainer type=\"search\" placeholder={fieldDefaultText} onChange={handleSearchFieldChange}/>\r\n    );\r\n}\r\n\r\n\r\nexport default SearchBox; \r\n","import React from \"react\"; \r\nimport styled from \"styled-components\"; \r\n\r\nconst CardStyle = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    background-color: #95dada;\r\n    border: 1px solid grey;\r\n    border-radius: 5px;\r\n    padding: 25px;\r\n    cursor: pointer;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    backface-visibility: hidden;\r\n    transform: translateZ(0);\r\n    transition: transform 0.25s ease-out;\r\n       \r\n    &:hover {\r\n            transform: scale(1.05);\r\n        }\r\n`;\r\n\r\n\r\n\r\nconst Card = (props) => {\r\n    const {monster} = props;\r\n    return (\r\n        <CardStyle>\r\n            <img alt=\"monster\" src= {\"https://robohash.org/\" + monster.id + \"?size=180x180\"}/>\r\n            <h2 key={monster.id}>{monster.name}</h2>\r\n            <p>{monster.email}</p>\r\n\r\n        </CardStyle>\r\n    );\r\n}\r\n\r\nexport default Card; ","import React from \"react\"; \r\nimport styled from \"styled-components\";\r\nimport Card from \"./card.component.js\";\r\n\r\nconst CardListStyle = styled.div`\r\n    width: 85vw;\r\n    margin: 0 auto;\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr 1fr 1fr;\r\n    grid-gap: 20px;\r\n`;\r\n\r\nconst CardList = (props) => {\r\n    const {monsters} = props;\r\n\r\n    return(\r\n        <div>\r\n            <CardListStyle>{monsters.map((monster) => { \r\n              return(<Card key = {monster.id} monster = {monster}/>);  \r\n            } )}</CardListStyle>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList; ","import React, {useState , useEffect} from \"react\"\nimport styled from \"styled-components\"; \nimport Global from \"./components/Global.component.js\";\nimport SearchBox from \"./components/SearchBox.component.js\";\nimport CardList from \"./components/card-list.component.js\"\n\n\n\nconst Container = styled.div`\n  text-align: center;\n\n    h1 {\n      font-family: 'Bigelow Rules';\n      font-size: 72px;\n      color: #0ccac4;\n    }\n\n`;\n\nconst Heading = styled.h1`\n font-family: 'Bigelow Rules', cursive;\n`;\n\n\nconst App = () => {\n  const [monsters , setMonsters] = useState([]); \n  const [searchField , setSearchField] = useState(\"\");\n\n  //Only after first render/execution of this FC\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then((resp) => resp.json())\n    .then((users) => {\n      setMonsters(users);\n    });\n  }, []); \n\n  const handleSearchFieldChange = (e) => {\n    setSearchField(e.target.value); \n  };\n  \n  const filteredMonsters = monsters.filter((monster) => {\n   return (monster.name.toLowerCase().search(searchField.toLowerCase()) !== -1);\n  });\n \n  return (\n    <>\n    <Global/>\n    <Container>\n        <Heading>Monsters Rolodex</Heading>\n        <SearchBox handleSearchFieldChange = {handleSearchFieldChange} fieldDefaultText = \"search monsters...\" />\n        <CardList monsters = {filteredMonsters} />\n    </Container>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}